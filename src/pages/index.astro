---
import Layout from "../layouts/Layout.astro";
import { mapTextComponent } from "../functions/mapTextComponent";

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.

const url = import.meta.env.PREPR_URL_PREVIEW ?? import.meta.env.PREPR_URL;

const query = `
  query {
    Homepage { 
      _id
      information { 
        __typename
      ... on Spotify {
        _id
        spotify {
          _id
          url
        }
      }
      ... on Soundcloud {
        _id
        soundcloud {
          _id
          url
        }
      }
      ... on Tekst {
        _id
        distorted
        text
      }
      ... on Image {
        _id
        image {
          url
          width
          height
        }
      }
    }
      inspiration { 
        __typename
      }
    }
  }
`;

const response = await fetch(url, {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({
    query,
  }),
});

const { data } = await response.json();

const information = data.Homepage.information;
const inspiration = data.Homepage.inspiration;
---

<Layout>
  <div id="container">
    <!-- <img id="background" src={background.src} alt="" fetchpriority="high" /> -->
    <svg
      class="fixed inset-0 transform -translate-x-full"
      style="display: none"
    >
      <defs>
        <filter id="n0">
          <feTurbulence
            type="turbulence"
            baseFrequency="0.001 0.1"
            numOctaves="5"
            result="NOISE"></feTurbulence>
          <feGaussianBlur in="SourceGraphic" result="BLURRED" stdDeviation="4.5"
          ></feGaussianBlur>
          <feDisplacementMap
            in2="NOISE"
            in="BLURRED"
            scale="50"
            xChannelSelector="R"
            yChannelSelector="G"></feDisplacementMap>
        </filter>
        <filter id="n1">
          <feTurbulence
            type="fractalNoise"
            baseFrequency="0.001 0.001"
            numOctaves="5"
            result="NOISE"
            seed="172821"></feTurbulence>
          <feGaussianBlur in="SourceGraphic" result="BLURRED" stdDeviation="0"
          ></feGaussianBlur>
          <feDisplacementMap
            id="displacer"
            in2="NOISE"
            in="BLURRED"
            scale="15"
            xChannelSelector="R"
            yChannelSelector="R"
            result="DISPLACED"></feDisplacementMap>
        </filter>
        <filter id="n2" color-interpolation-filters="sRGB">
          <feTurbulence
            type="fractalNoise"
            baseFrequency="0.001 0.001"
            numOctaves="5"
            result="NOISE"
            seed="172821"></feTurbulence>
          <feGaussianBlur in="SourceGraphic" result="BLURRED" stdDeviation="0"
          ></feGaussianBlur>
          <feDisplacementMap
            id="displacer"
            in2="NOISE"
            in="BLURRED"
            scale="15"
            xChannelSelector="R"
            yChannelSelector="R"
            result="DISPLACED"></feDisplacementMap>
          <feColorMatrix
            in="DISPLACED"
            result="RED"
            type="matrix"
            values="0 0 0 0 0
                            0 1 0 0 0
                            0 0 1 0 0
                            0 0 0 1 0"
          ></feColorMatrix>
          <feColorMatrix
            in="DISPLACED"
            result="GREEN"
            type="matrix"
            values="1 0 0 0 0
                            0 0 0 0 0
                            0 0 1 0 0
                            0 0 0 1 0"
          ></feColorMatrix>
          <feColorMatrix
            in="DISPLACED"
            result="BLUE"
            type="matrix"
            values="1 0 0 0 0
                            0 1 0 0 0
                            0 0 0 0 0
                            0 0 0 1 0"
          ></feColorMatrix>
          <feOffset in="RED" dx="-3" dy="0" result="D_RED"></feOffset>
          <feOffset in="GREEN" dx="0" dy="0" result="D_GREEN"></feOffset>
          <feOffset in="BLUE" dx="3" dy="0" result="D_BLUE"></feOffset>
          <feBlend in="D_RED" in2="D_BLUE" out="RB" mode="multiply"></feBlend>
          <feBlend in="D_GREEN" in2="RB" out="RGB" mode="multiply"></feBlend>
        </filter>
      </defs>
    </svg>

    <main>
      <section class="information">
        <h2 style="color: gray">Information</h2>
        {
          information.map((info: any) => {
            switch (info.__typename) {
              case "Tekst":
                const text = mapTextComponent(info);
                return (
                  <span class:list={text.classList} set:html={text.text} />
                );
              case "Spotify":
                return <a href={info.spotify.url}> {info.spotify.url} </a>;
              case "Image":
                return (
                  <img src={info.image.url} alt="" width="1536" height="2048" />
                );
            }
          })
        }
      </section>
      <section class="inspiration">
        <h2 style="color: gray">Inspiration</h2>
        {
          inspiration.map((inspi: any) => {
            switch (inspi.__typename) {
            }
          })
        }
      </section>
    </main>
  </div>
</Layout>
<style>
  html {
    /* blue color pallate */
    --blue-200: oklch(25% 0.2 200);

    /* green color pallate */
    --green-200: oklch(90% 0.1 150);

    /* white color */
    --white: oklch(100% 0.075 0);

    /* named tokens */
    --information-background-color: var(--blue-200);
    --inspiration-background-color: var(--green-200);

    --text-color: var(--white);
  }

  img {
    max-width: 100%;
    height: auto;
  }

  :global(p) {
    margin-block: 1em;
    line-height: 1.5;
    font-size: 1.5rem;
  }

  :global(.distorted > p) {
    filter: url(#n1);
  }

  #background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    filter: blur(100px);
  }

  #container {
    font-family: Inter, Roboto, "Helvetica Neue", "Arial Nova", "Nimbus Sans",
      Arial, sans-serif;
    height: 100%;
  }

  main {
    min-height: 100%;
    display: flex;
    scrollbar-width: thin;
  }

  main > section {
    padding: 2rem;
    height: 100vh;
    height: 100dvh;
    width: 50%;
    flex-basis: 500px;
    flex-grow: 1;
    flex-shrink: 0;
    overflow: scroll;
  }

  .information {
    background-color: var(--information-background-color);

    color: var(--text-color);
  }

  .inspiration {
    background-color: var(--inspiration-background-color);
  }

  h2 {
    margin: 0 0 1em;
    font-weight: normal;
    color: #111827;
    font-size: 2rem;
  }
  * {
    box-sizing: border-box;
  }
</style>
